'use strict';

/**
 * TrainingModule â€“ SCORM Course Loader & Manager
 * Handles authentication, user data, SCORM communication, manifest loading, and error UI.
 */
export default class TrainingModule {
    constructor(options) {
        this.OPTIONS = Object.assign({}, {
            authenticate: false,
            authType: 'RSI',
            debug: true
        }, options);

        this.COURSE = {};
        this.USER_DATA = {};

        // Determine debug mode from options, with some obfuscated logic
        this.DEBUG_MODE =
            (options?.debug === true) ||
            (typeof options?.debug === "string" && options.debug.toLowerCase() === "true") ||
            this.OPTIONS.debug;

        this.RSI_TRAINING_PATH = '/training/cybersecurity';
        this.RSI_COURSES_PATH = this.RSI_TRAINING_PATH + '/courses';
        this.RSI_FUNCTIONS = this.RSI_TRAINING_PATH + '/scripts/functions.asp';
        this.PIPWERKS_SCORM = pipwerks.SCORM;

        // Set SCORM debug mode according to DEBUG_MODE
        if (typeof pipwerks !== 'undefined') {
            this.PIPWERKS_SCORM.debug.isActive = this.DEBUG_MODE;
        }
    }

    // Fetch the imsmanifest.xml for the course
    async #getManifest(courseName) {
        try {
            const response = await fetch(this.RSI_COURSES_PATH + '/' + courseName + '/imsmanifest.xml');
            if (!response.ok)
                throw new Error('Error ' + response.status + ' when fetching ' + response.url + '.');
            return response;
        } catch (err) {
            this.showDebug(err, 'error');
            this.showModal(
                `<p style='text-align:left'><strong>Error</strong>: The course could not be found.<br>Please try refreshing the page or contact support if the problem persists.</p>`,
                600000
            );
            return false;
        }
    }

    // Fetch user data (for authentication)
    async #getUserData(authType = this.OPTIONS.authType) {
        return fetch(this.RSI_FUNCTIONS, {
            method: 'POST',
            headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
            body: 'action=getUserData&authType=' + authType
        })
        .then(res => res.json())
        .then(data => data)
        .catch(err => {
            this.showDebug('Error getting user data: ' + err, 'error');
            return false;
        });
    }

    // Parse and validate the manifest XML, populates this.COURSE
    async #processManifest(manifestResponse) {
        try {
            const xmlText = await manifestResponse.text();
            const parser = new DOMParser();
            const xml = parser.parseFromString(xmlText, 'text/xml');
            const resource = xml.querySelector('resources > resource');
            const schema = xml.querySelector('metadata > schema');
            const schemaversion = xml.querySelector('metadata > schemaversion');
            const title = xml.querySelector('organizations > organization > title');
            const manifest = xml.querySelector('manifest');

            if (schema) this.COURSE.schema = schema.textContent;
            else throw new Error('Schema element not found.');
            if (schemaversion) this.COURSE.schemaversion = schemaversion.textContent;
            else throw new Error('Schema version not found.');
            if (resource) this.COURSE.href = resource.getAttribute('href');
            else throw new Error('Resource element not found.');
            if (title) this.COURSE.title = title.textContent;
            else {
                this.COURSE.title = null;
                this.showDebug('Title element not found.', 'warn');
            }
            if (manifest.hasAttribute('identifier'))
                this.COURSE.indentifier = manifest.getAttribute('identifier');
            else {
                this.COURSE.indentifier = null;
                this.showDebug('Manifest identifier not found.', 'warn');
            }
            return true;
        } catch (err) {
            this.showDebug('Error reading manifest: ' + err, 'error');
            this.showModal(
                `<p style="text-align:left"><strong>Error</strong>: An error occurred while attempting to read the course data.<br>Please try refreshing the page or contact support if the problem persists.</p>`,
                600000
            );
            return false;
        }
    }

    // Inject custom CSS into the course iframe to hide branding/controls
    #injectCSS() {
        document.getElementById('Course_Content').onload = function () {
            const iframeDoc = document.getElementById('Course_Content').contentWindow.document;
            const style = iframeDoc.createElement('style');
            style.innerHTML =
                'body {background-color: #dcdee0} ' +
                '.free-logo {cursor: default !important} ' +
                '.free-logo__logo {visibility: hidden !important;} ' +
                '.quiz-top-panel, .top-panel {display: none !important} ' +
                '.quiz-control-panel__quiz-score-info {display: none !important}';
            iframeDoc.head.appendChild(style);
        };
    }

    // Set user data in SCORM, according to version
    #setSCORMUser(userData) {
        const scorm = this.PIPWERKS_SCORM;
        const name = userData.lastname + ',' + userData.firstname;
        switch (scorm.version) {
            case '1.1':
            case '1.2':
            case '2001':
                return scorm.set('cmi.core.student_id', userData.email)
                    && scorm.set('cmi.core.student_name', name);
            case '1.3':
            case '2004':
                return scorm.set('cmi.learner_id', userData.email)
                    && scorm.set('cmi.learner_name', name);
            default:
                return false;
        }
    }

    // Load course content into iframe and show title
    #showContent(iframeId = 'Course_Content') {
        const iframe = document.getElementById(iframeId);
        try {
            iframe.src = this.RSI_COURSES_PATH + '/' + this.COURSE.path + '/' + this.COURSE.href;
            if (this.COURSE.title !== null)
                document.getElementById('course_title').innerHTML = this.COURSE.title;
            this.#injectCSS();
        } catch (err) {
            this.showDebug('Error loading course content: ' + err, 'error');
            this.showModal(
                `<p style='text-align:left'><strong>Error</strong>: Unable to load the course content.<br>Please try refreshing the page or contact support if the problem persists.</p>`,
                600000
            );
        }
    }



    // Entry point: create and load course, handle all validation and setup
    async create(courseName) {
        // Default user
        let userData = {
            email: 'no_email_address',
            firstname: 'User',
            lastname: 'Unauthenticated'
        };

        // if (this.OPTIONS.authenticate) {
        //     const authType = this.OPTIONS.authType;
            userData = await this.#getUserData();
            // Check for minimal authentication fields
        //     if (
        //         (authType === 'RSI' && !userData?.guid) ||
        //         (authType === 'ATTUID' && !userData?.attuid) ||
        //         (!userData?.attuid && !userData?.guid)
        //     ) {
        //         this.showDebug('Cannot fetch user data (authType: ' + authType + ')', 'error');
        //         this.showModal(
        //             `<p style="text-align:left"><strong>Error</strong>: Unable to load user data.<br>Please try refreshing the page or contact support if the problem persists.</p>`,
        //             600000
        //         );
        //         return false;
        //     }
        // }
        this.USER_DATA = userData;

        // Load manifest and process it
        const manifestResp = await this.#getManifest(courseName);
        if (!manifestResp?.ok) return false;

        const manifestOk = await this.#processManifest(manifestResp);
        if (!manifestOk) return false;

        const scorm = this.PIPWERKS_SCORM;
        const course = this.COURSE;
        const validVersions = ['1.2', '2004', '1.3', '2001'];

        course.path = courseName;
        course.validVersion = validVersions.filter(ver => course.schemaversion.includes(ver));

        // SCORM package validation
        if (course.schema !== 'ADL SCORM') {
            this.showDebug('The course is not a valid SCORM Package (' + course.schema + '). Aborting.');
            this.showModal(
                `<p style="text-align:left"><strong>Error</strong>: The course is not a valid SCORM package. Please contact support.`,
                600000
            );
            return false;
        }
        if (!course.validVersion.length) {
            this.showDebug('The SCORM Package is not a valid version (' + course.schemaversion + '). Aborting.');
            this.showModal(
                `<p style="text-align:left"><strong>Error</strong>: The course is not a valid SCORM version. Please contact support.`,
                600000
            );
            return false;
        }

        scorm.version = course.validVersion[0];

        // SCORM Initialization
        if (!scorm.init()) {
            this.showDebug('SCORM Wrapper initialization failed.', 'error');
            this.showModal(
                `<p style='text-align:left'><strong>Error</strong>: Unable to initialize training module.<br>Please try refreshing the page or contact support if the problem persists.</p>`,
                600000
            );
            scorm.quit();
            return false;
        }

        // Save user data locally
        localStorage.setItem('userData', JSON.stringify(userData));
        const scormUserSet = this.#setSCORMUser(userData);

        if (!scormUserSet) {
            this.showDebug('Failed to set SCORM data', 'error');
            this.showModal(
                `<p style='text-align:left'><strong>Error</strong>: Unable to set the training data.<br>Please try refreshing the page or contact support if the problem persists.</p>`,
                600000
            );
            scorm.quit();
            return false;
        }
        if (!scorm.save()) {
            this.showDebug('Failed to save SCORM data', 'error');
            this.showModal(
                `<p style='text-align:left'><strong>Error</strong>: Unable to save training progress.<br>Please try refreshing the page or contact support if the problem persists.</p>`,
                600000
            );
            scorm.quit();
            return false;
        }
        this.#showContent();
    }

    // Save course state to localStorage
    saveCourse(cmiData, auto = true) {
        this.saveLocal(cmiData);
    }

    saveLocal(cmiData) {
        localStorage.setItem('cmiData', JSON.stringify(cmiData));
    }

    saveToDB(cmiData) {
        // Not implemented
    }

    // End the session and quit SCORM
    close() {
        console.warn('TrainingModule.close()');
        this.PIPWERKS_SCORM.quit();
    }

    // Show a modal dialog for errors/warnings
    showModal(html = null, timeout = 3000) {
        if (!html) return;
        // Remove any existing modal
        document.querySelector('.modal')?.remove();
        document.querySelector('.modal-overlay')?.remove();
        // Create modal
        const modal = document.createElement('div');
        modal.classList.add('modal');
        const p = document.createElement('p');
        p.innerHTML = html;
        modal.appendChild(p);
        const overlay = document.createElement('div');
        overlay.classList.add('modal-overlay');
        document.body.appendChild(overlay);
        document.body.appendChild(modal);
        setTimeout(() => {
            overlay.remove();
            modal.remove();
        }, timeout);
    }

    // Log errors/warnings/info if debug is enabled
    showDebug(message = null, type = 'log') {
        if (!message || !this.DEBUG_MODE) return;
        console[type](message);
    }
}